<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WeTry | Encore un autre blog de développeur</title>
    <description>Encore un autre blog de développeur.</description>
    <link>https://wetry.tech/</link>
    <atom:link href="https://wetry.tech/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 04 Oct 2019 10:59:59 +0000</pubDate>
    <lastBuildDate>Fri, 04 Oct 2019 10:59:59 +0000</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>L'immuabilité pour un code sans bug</title>
        <description>&lt;h2 id=&quot;mon-premier-titre-putaclick&quot;&gt;Mon premier titre putaclick&lt;/h2&gt; &lt;p&gt;Voilà un titre prétentieux. Je me dois déjà de préciser le contenu qui va suivre.&lt;/p&gt; &lt;p&gt;Seules les bonnes pratiques sont à l’origine de code sans bug et sans surprise. Elles sont nombreuses et toutes agissent sur différentes ficelles. Parfois sur l’extensibilité du code, sur la lisibilité, les performances …&lt;/p&gt; &lt;p&gt;Aujourd’hui, la bonne pratique que je vous partage facilite l’évolution des objets dans ses futures itérations.&lt;/p&gt; &lt;h2 id=&quot;un-exemple&quot;&gt;Un exemple&lt;/h2&gt; &lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_nom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_prenom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;...</description>
        <pubDate>Fri, 04 Oct 2019 07:00:00 +0000</pubDate>
        <link>https://wetry.tech/oriente-objet-et-immuabilite/</link>
        <guid isPermaLink="true">https://wetry.tech/oriente-objet-et-immuabilite/</guid>
        
        <category>bonne pratique</category>
        
        <category>test</category>
        
        <category>orienté objet</category>
        
        <category>bonne-pratique</category>
      </item>
    
      <item>
        <title>Une bonne doc est une doc accessible</title>
        <description>&lt;h1 id=&quot;un-article-réaction&quot;&gt;Un article réaction&lt;/h1&gt; &lt;p&gt;J’adore reddit, et j’adore &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor&quot;&gt;r/ProgrammerHumor&lt;/a&gt;. Mais une &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/d29xjn/documentation/&quot;&gt;publication cette semaine&lt;/a&gt; m’a soulevé une réflexion. Est-ce que swagger est une documentation ? Et si oui, est-ce une bonne documentation ?&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://i.redd.it/frm61ch4lsl31.png&quot; alt=&quot;swaggerdoc&quot; /&gt;&lt;/p&gt; &lt;p&gt;De cette réflexion, l’envie de partager des pratiques simples pour une documentation accessible et sous différentes formes.&lt;/p&gt; &lt;h1 id=&quot;quest-ce-quune-documentation-&quot;&gt;Qu’est-ce qu’une documentation ?&lt;/h1&gt; &lt;p&gt;Penchons-nous sur la définition de la documentation selon l’association Association française de normalisation (ISO). &lt;em&gt;“la documentation est l’ensemble des techniques permettant le traitement permanent et systématique de documents ou de données, incluant la collecte, le &lt;strong&gt;signalement&lt;/strong&gt;, l’analyse, le stockage,...</description>
        <pubDate>Fri, 13 Sep 2019 07:00:00 +0000</pubDate>
        <link>https://wetry.tech/une-bonne-doc-est-une-doc-accessible/</link>
        <guid isPermaLink="true">https://wetry.tech/une-bonne-doc-est-une-doc-accessible/</guid>
        
        <category>documentation</category>
        
        <category>bonne pratique</category>
        
        <category>bonne-pratique</category>
      </item>
    
      <item>
        <title>Comprendre le ngModel</title>
        <description>&lt;p&gt;Si vous utilisez les formulaires de type “template driven”, vous utilisez également le ngModel, mais savez-vous ce qui se cache derrière ? Sauriez-vous créer votre propre ngModel ?&lt;/p&gt; &lt;p&gt;Dans cet article, nous allons passer en revue sa syntaxe, mais allons également voir qu’il s’agit d’un cas particulier.&lt;/p&gt; &lt;h2 id=&quot;syntaxe&quot;&gt;Syntaxe&lt;/h2&gt; &lt;p&gt;Dans Angular nous trouvons quatre (3 + l’interpolation) types de bindings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Property binding&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;: permet de passer une information d’un composant parent à un composant enfant;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Event binding&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;: permet d’écouter un évènement JavaScript ou de passer une information d’un composant enfant à un composant parent (via un...</description>
        <pubDate>Tue, 03 Sep 2019 21:09:24 +0000</pubDate>
        <link>https://wetry.tech/comprendre-le-ng-model/</link>
        <guid isPermaLink="true">https://wetry.tech/comprendre-le-ng-model/</guid>
        
        <category>angular</category>
        
        <category>form</category>
        
        <category>documentation</category>
      </item>
    
      <item>
        <title>Les secrets du Router d'Angular</title>
        <description>&lt;p&gt;Le routing est un élément inévitable dans une Application Web. Nous allons donc nous concentrer sur cette partie du framework Angular.&lt;/p&gt; &lt;p&gt;Si vous êtes uniquement intéressé pas un point précis du routing, n’hésitez pas à aller voir la &lt;a href=&quot;#toc&quot;&gt;table des matières&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;cest-quoi-le-routing-&quot;&gt;C’est quoi le routing ?&lt;/h2&gt; &lt;p&gt;Le système de routing est la gestion de l’affichage via l’URL dans le navigateur. Le fait d’avoir l’url &lt;code class=&quot;highlighter-rouge&quot;&gt;/home&lt;/code&gt; affichera des informations différentes de l’url &lt;code class=&quot;highlighter-rouge&quot;&gt;/contact&lt;/code&gt; par exemple.&lt;/p&gt; &lt;p&gt;Pour que cela fonctionne, il faut que ça soit le JavaScript qui ait la main sur l’url à la place du navigateur....</description>
        <pubDate>Thu, 29 Aug 2019 19:22:26 +0000</pubDate>
        <link>https://wetry.tech/les-secrets-du-router-d'angular/</link>
        <guid isPermaLink="true">https://wetry.tech/les-secrets-du-router-d'angular/</guid>
        
        <category>angular</category>
        
        <category>routing</category>
        
        <category>documentation</category>
      </item>
    
      <item>
        <title>Azure Functions les bases</title>
        <description>&lt;h1 id=&quot;azure-functions--les-bases&quot;&gt;Azure Functions : Les bases&lt;/h1&gt; &lt;p&gt;Une Azure functions peut facilement se résumer en quelques points :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;c’est un service de calcul dans le cloud Azure &lt;strong&gt;serverless&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;qui permet &lt;strong&gt;d’exécuter du code à la demande&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;sans avoir à &lt;strong&gt;provisionner d’infrastructure&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;En résumé, on va définir sur le cloud un container, dans lequelle les fonctions seront déployées, ensuite, l’exécution, le scaling, la disponibilité et tout autre problème/considérations qui pourrait être lié à l’infrastructure devient la responsabilité d’Azure, nous ne devons nous occuper de rien.&lt;/p&gt; &lt;p&gt;Une fois le code déployer et disponible, il reste une chose à comprendre, c’est comment...</description>
        <pubDate>Sun, 11 Aug 2019 18:26:40 +0000</pubDate>
        <link>https://wetry.tech/azure-functions-les-bases/</link>
        <guid isPermaLink="true">https://wetry.tech/azure-functions-les-bases/</guid>
        
        <category>azure</category>
        
        <category>tutorial</category>
        
        <category>serverless</category>
        
        <category>documentation</category>
      </item>
    
  </channel>
</rss>
